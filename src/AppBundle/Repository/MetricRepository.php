<?php

namespace AppBundle\Repository;
use DateTime;
use Doctrine\ORM\Query\ResultSetMapping;
use function dump;
use const PHP_EOL;

/**
 * MetricRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MetricRepository extends \Doctrine\ORM\EntityRepository
{
    public function findMetricValuesAverageAtDate(DateTime $date)
    {
        $from = new \DateTime($date->format("Y-m-d")." 00:00:00");
        $to   = new \DateTime($date->format("Y-m-d")." 23:59:59");

        return $this->createQueryBuilder('m')
            ->select('AVG(m.value)')
            ->where('m.timestamp BETWEEN :from AND :to')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->getQuery()
            ->getScalarResult();
    }

    public function findMetricValuesOrderedAtDate(DateTime $date)
    {
        $from = new \DateTime($date->format("Y-m-d")." 00:00:00");
        $to   = new \DateTime($date->format("Y-m-d")." 23:59:59");

        return $this->createQueryBuilder('m')
            ->select('m.value')
            ->where('m.timestamp BETWEEN :from AND :to')
            ->orderBy('m.value', 'ASC')
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->getQuery()
            ->getResult();
    }

    public function findMetricValuesMedianAtDate(DateTime $date)
    {
        $from = new \DateTime($date->format("Y-m-d")." 00:00:00");
        $to   = new \DateTime($date->format("Y-m-d")." 23:59:59");

        $query = $this->getEntityManager()->createNativeQuery('
                SELECT
                   AVG(s.value)
                FROM
                   (SELECT @rowindex:=@rowindex + 1 AS rowindex, metric.value
                    FROM metric
                    WHERE metric.timestamp BETWEEN :from AND :to
                    ORDER BY metric.value) AS s
                WHERE
                s.rowindex IN (FLOOR(@rowindex / 2) , CEIL(@rowindex / 2))
            ', new ResultSetMapping())
            ->setParameter('from', $from)
            ->setParameter('to', $to)
        ;
    }

}
